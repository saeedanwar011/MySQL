-- Create A Database name Bikestore.
CREATE  Database Bikestore;

-- Full Overview of the dataset.
SELECT * FROM bikestore.bike;

-- Use table Bikestore.
use bikestore;

-- Select table From Bikestore Database.
select * from bike;

-- DATA MINING 

-- Change Column Name MyMyUnknownColumn TO month.
ALTER TABLE bike
RENAME COLUMN MyUnknownColumn TO month;

-- DATA ANALYSIS AND VISULIZATION 

/* The Count of entiries for each columns */
SELECT 
SUM(revenue) AS Total_revenue,
SUM(total_units) AS Total_units_sold,
COUNT(DISTINCT order_id) AS Orders,
COUNT(DISTINCT customers) AS Cusromers, 
COUNT(DISTINCT sales_rep) AS Salesreps
FROM bike;


SELECT 
    COUNT(DISTINCT city) AS City,
    COUNT(DISTINCT state) AS States,
    COUNT(DISTINCT product_name) AS Product_name,
    COUNT(DISTINCT category_name) AS Category_name,
    COUNT(DISTINCT brand_name) AS Brand_name,
    COUNT(DISTINCT store_name) AS Store_name
FROM
    bike;

/* Total Revenue Generated per Year */
SELECT year, sum(revenue) AS Revenue
FROM bike
GROUP BY year
ORDER BY Revenue desc;

-- Total Revenue Generated each Month
SELECT month, sum(revenue) AS Revenue, SUM(total_units) as Unit_sold
FROM bike
GROUP BY month
ORDER BY Revenue desc;

-- Use CASE funtion to group bu the month according to seasons of the years.
SELECT
  CASE
	WHEN month IN('Dec', 'Jan', 'Feb') THEN 'Winter'
    WHEN month IN('Mar', 'Apr', 'May') THEN 'Spring'
    WHEN month IN('Jun', 'Jul', 'Aug') Then 'Summer'
    ELSE 'Autumn'
  END AS Season,
  SUM(total_units) AS Total_units_sold,
  SUM(revenue) AS Total_revenue
FROM bike
GROUP BY Season   
ORDER BY Total_revenue DESC;


-- The total revenue generated each store.
SELECT store_name, SUM(revenue) AS Total_revenue, SUM(total_unitS) AS unit_sold
FROM bike
GROUP BY store_name

ORDER BY Total_revenue DESC;


-- Total revenue generated by each product category.
SELECT category_name , SUM(revenue) AS Total_revenue, SUM(total_units) AS unit_sold
FROM bike 
GROUP BY category_name
ORDER BY Total_revenue DESC;